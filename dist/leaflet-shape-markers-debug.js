/* leaflet-shape-markers - v1.0.7 - Tue Oct 03 2023 08:32:43 GMT+0200 (Eastern European Standard Time)
 * Copyright (c) 2023 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('leaflet')) :
	typeof define === 'function' && define.amd ? define(['exports', 'leaflet'], factory) :
	(factory((global.L = global.L || {}, global.L.shapeMarkers = global.L.shapeMarkers || {}),global.L));
}(this, function (exports,L) { 'use strict';

	L = 'default' in L ? L['default'] : L;

	var name = "leaflet-shape-markers";
	var description = "Shape markers of fixed size for point symbols";
	var version$1 = "1.0.7";
	var author = "Rachel Nehmer <rnehmer@esri.com>";
	var bugs = {"url":"https://github.com/Esri/Leaflet.shapeMarkers/issues"};
	var contributors = ["Rachel Nehmer <rnehmer@esri.com>","John Gravois <jgravois@esri.com>"];
	var dependencies = {"leaflet":"^1.0.0"};
	var devDependencies = {"karma":"^0.12.24","karma-mocha":"^0.1.0","karma-chai-sinon":"^0.1.3","karma-coverage":"^0.5.3","karma-mocha-reporter":"^0.2.5","karma-phantomjs-launcher":"^0.2.0","karma-sourcemap-loader":"^0.3.5","semistandard":"^7.0.5","gh-release":"^2.0.0","mkdirp":"^0.5.1","rollup":"^0.25.4","rollup-plugin-json":"^2.0.0","rollup-plugin-node-resolve":"^1.4.0","rollup-plugin-uglify":"^0.3.1","uglify-js":"^2.4.23","watch":"^0.17.1"};
	var homepage = "http://github.com/Esri/Leaflet.shapeMarkers";
	var module$1 = "src/ShapeMarkers.js";
	var jspm = {"registry":"npm","format":"es6"};
	var keywords = ["Leaflet","GIS","Esri"];
	var license = "Apache-2.0";
	var main = "dist/leaflet-shape-markers.js";
	var readmeFilename = "README.md";
	var repository = {"type":"git","url":"git@github.com:Esri/Leaflet.shapeMarkers.git"};
	var scripts = {"prepublish":"npm run build","prebuild":"mkdirp dist","build":"rollup -c scripts/debug.js && rollup -c scripts/production.js","release":"./scripts/release.sh","lint":"semistandard src/*.js","pretest":"npm run build","start":"watch 'npm run build' src & http-server -p 5000 -c-1 -o","test":"npm run lint && karma start"};
	var packageInfo = {
		name: name,
		description: description,
		version: version$1,
		author: author,
		bugs: bugs,
		contributors: contributors,
		dependencies: dependencies,
		devDependencies: devDependencies,
		homepage: homepage,
		module: module$1,
		jspm: jspm,
		keywords: keywords,
		license: license,
		main: main,
		readmeFilename: readmeFilename,
		repository: repository,
		scripts: scripts,
		"jsnext:main": "src/ShapeMarkers.js"
	};

	var ShapeMarker = L.Path.extend({

	  initialize: function (latlng, size, options) {
	    L.setOptions(this, options);
	    this._size = size;
	    this._latlng = L.latLng(latlng);
	    this._svgCanvasIncludes();
	  },

	  toGeoJSON: function () {
	    return L.GeoJSON.getFeature(this, {
	      type: 'Point',
	      coordinates: L.GeoJSON.latLngToCoords(this.getLatLng())
	    });
	  },

	  _svgCanvasIncludes: function () {
	    // implement in sub class
	  },

	  _project: function () {
	    this._point = this._map.latLngToLayerPoint(this._latlng);
	  },

	  _update: function () {
	    if (this._map) {
	      this._updatePath();
	    }
	  },

	  _updatePath: function () {
	    // implement in sub class
	  },

	  setLatLng: function (latlng) {
	    this._latlng = L.latLng(latlng);
	    this.redraw();
	    return this.fire('move', {latlng: this._latlng});
	  },

	  getLatLng: function () {
	    return this._latlng;
	  },

	  setSize: function (size) {
	    this._size = size;
	    return this.redraw();
	  },

	  getSize: function () {
	    return this._size;
	  },

	  // NOTE: Needed by the leaflet `Canvas` renderer for interactivity
	  // For more details please see https://github.com/boss-solutions/boss_maps/issues/200#issuecomment-1743215427
	  // and https://github.com/Esri/Leaflet.shapeMarkers/issues/26
		_containsPoint: function (p) {
	    if (p) {
			   return p.distanceTo(this._point) <= this.getSize() + this._clickTolerance();
	    }
	    return false;
		},

	  _updateBounds: function () {
	    // NOTE: there is no bounds to update so this is a dummy method to avoid errors
	    // For more details please see here https://github.com/Esri/esri-leaflet/issues/1368
	  }

	});

	var CrossMarker = ShapeMarker.extend({

	  initialize: function (latlng, size, options) {
	    ShapeMarker.prototype.initialize.call(this, latlng, size, options);
	  },

	  _updatePath: function () {
	    this._renderer._updateCrossMarker(this);
	  },

	  _svgCanvasIncludes: function () {
	    L.Canvas.include({
	      _updateCrossMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;
	        var ctx = this._ctx;

	        ctx.beginPath();
	        ctx.moveTo(latlng.x, latlng.y + offset);
	        ctx.lineTo(latlng.x, latlng.y - offset);
	        this._fillStroke(ctx, layer);

	        ctx.moveTo(latlng.x - offset, latlng.y);
	        ctx.lineTo(latlng.x + offset, latlng.y);
	        this._fillStroke(ctx, layer);
	      }
	    });

	    L.SVG.include({
	      _updateCrossMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;

	        if (L.Browser.vml) {
	          latlng._round();
	          offset = Math.round(offset);
	        }

	        var str = 'M' + latlng.x + ',' + (latlng.y + offset) +
	          'L' + latlng.x + ',' + (latlng.y - offset) +
	          'M' + (latlng.x - offset) + ',' + latlng.y +
	          'L' + (latlng.x + offset) + ',' + latlng.y;

	        this._setPath(layer, str);
	      }
	    });
	  }
	});

	var crossMarker = function (latlng, size, options) {
	  return new CrossMarker(latlng, size, options);
	};

	var XMarker = ShapeMarker.extend({

	  initialize: function (latlng, size, options) {
	    ShapeMarker.prototype.initialize.call(this, latlng, size, options);
	  },

	  _updatePath: function () {
	    this._renderer._updateXMarker(this);
	  },

	  _svgCanvasIncludes: function () {
	    L.Canvas.include({
	      _updateXMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;
	        var ctx = this._ctx;

	        ctx.beginPath();

	        ctx.moveTo(latlng.x + offset, latlng.y + offset);
	        ctx.lineTo(latlng.x - offset, latlng.y - offset);
	        this._fillStroke(ctx, layer);
	      }
	    });

	    L.SVG.include({
	      _updateXMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;

	        if (L.Browser.vml) {
	          latlng._round();
	          offset = Math.round(offset);
	        }

	        var str = 'M' + (latlng.x + offset) + ',' + (latlng.y + offset) +
	          'L' + (latlng.x - offset) + ',' + (latlng.y - offset) +
	          'M' + (latlng.x - offset) + ',' + (latlng.y + offset) +
	          'L' + (latlng.x + offset) + ',' + (latlng.y - offset);

	        this._setPath(layer, str);
	      }
	    });
	  }
	});

	var xMarker = function (latlng, size, options) {
	  return new XMarker(latlng, size, options);
	};

	var SquareMarker = ShapeMarker.extend({
	  options: {
	    fill: true
	  },

	  initialize: function (latlng, size, options) {
	    ShapeMarker.prototype.initialize.call(this, latlng, size, options);
	  },

	  _updatePath: function () {
	    this._renderer._updateSquareMarker(this);
	  },

	  _svgCanvasIncludes: function () {
	    L.Canvas.include({
	      _updateSquareMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;
	        var ctx = this._ctx;

	        ctx.beginPath();

	        ctx.moveTo(latlng.x + offset, latlng.y + offset);
	        ctx.lineTo(latlng.x - offset, latlng.y + offset);
	        ctx.lineTo(latlng.x - offset, latlng.y - offset);
	        ctx.lineTo(latlng.x + offset, latlng.y - offset);

	        ctx.closePath();

	        this._fillStroke(ctx, layer);
	      }
	    });

	    L.SVG.include({
	      _updateSquareMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;

	        if (L.Browser.vml) {
	          latlng._round();
	          offset = Math.round(offset);
	        }

	        var str = 'M' + (latlng.x + offset) + ',' + (latlng.y + offset) +
	          'L' + (latlng.x - offset) + ',' + (latlng.y + offset) +
	          'L' + (latlng.x - offset) + ',' + (latlng.y - offset) +
	          'L' + (latlng.x + offset) + ',' + (latlng.y - offset);

	        str = str + (L.Browser.svg ? 'z' : 'x');

	        this._setPath(layer, str);
	      }
	    });
	  }
	});

	var squareMarker = function (latlng, size, options) {
	  return new SquareMarker(latlng, size, options);
	};

	var DiamondMarker = ShapeMarker.extend({
	  options: {
	    fill: true
	  },

	  initialize: function (latlng, size, options) {
	    ShapeMarker.prototype.initialize.call(this, latlng, size, options);
	  },

	  _updatePath: function () {
	    this._renderer._updateDiamondMarker(this);
	  },

	  _svgCanvasIncludes: function () {
	    L.Canvas.include({
	      _updateDiamondMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;
	        var ctx = this._ctx;

	        ctx.beginPath();

	        ctx.moveTo(latlng.x, latlng.y + offset);
	        ctx.lineTo(latlng.x - offset, latlng.y);
	        ctx.lineTo(latlng.x, latlng.y - offset);
	        ctx.lineTo(latlng.x + offset, latlng.y);

	        ctx.closePath();

	        this._fillStroke(ctx, layer);
	      }
	    });

	    L.SVG.include({
	      _updateDiamondMarker: function (layer) {
	        var latlng = layer._point;
	        var offset = layer._size / 2.0;

	        if (L.Browser.vml) {
	          latlng._round();
	          offset = Math.round(offset);
	        }

	        var str = 'M' + latlng.x + ',' + (latlng.y + offset) +
	          'L' + (latlng.x - offset) + ',' + latlng.y +
	          'L' + latlng.x + ',' + (latlng.y - offset) +
	          'L' + (latlng.x + offset) + ',' + latlng.y;

	        str = str + (L.Browser.svg ? 'z' : 'x');

	        this._setPath(layer, str);
	      }
	    });
	  }
	});

	var diamondMarker = function (latlng, size, options) {
	  return new DiamondMarker(latlng, size, options);
	};

	var version = packageInfo.version;

	exports.VERSION = version;
	exports.crossMarker = crossMarker;
	exports.xMarker = xMarker;
	exports.squareMarker = squareMarker;
	exports.diamondMarker = diamondMarker;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,